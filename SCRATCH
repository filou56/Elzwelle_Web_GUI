
    payload = btoa(fileContents);
	socket.send("{\"onSheetEvent\":\"`+id+`\",\"eventType\":\"ajaxData\",\"payload\":\""+payload+"\"}");
			
	java script:
	
	table.deselectRow(row);

	golang:
	
	func (sheet *Sheet) DeselectRow(row int) {
		id := sheet.ID()
		sheet.Send(`sheet_`+id+`.deselectRow(`+fmt.Sprint(row)+`);`)
	}

	"sheet_"+id <==> table2

	socket.send("{\"onResult\":\"`+id+`\",\"resultType\":\"int\",\"payload\":\""+foo(i,s,f)+"\"}");

	rcpInt(func,...interface{}) int
	rpcString(func,...interface{}) string
	rpcFloat(func,...interface{}) float64

----------------

socket.send("{\"onResult\":\"1234\",\"resultType\":\"string\",\"payload\":\""+String(123+45)+"\"}");

----------------

package main 

import (
	"fmt"
)

var (
	i	int		= 15
	f	float64 = 1.234
	s	string	= "Hallo"
) 

func rpcParams(args ...interface{}) string {
	var params string = ""
	
	for i,arg := range args {
		if i < len(args)-1 {
			params = params + fmt.Sprint(arg) + ","	
		} else {
			params = params + fmt.Sprint(arg)
		}
	}
	
	return params
}

func main() {
	fmt.Printf("%v%v%v\n",i,s,f)
	fmt.Println("foo("+rpcParams(i,s,f)+")")
}













	 ui.Root.Add(ui.Html(`
		<center><h2>Tabulator Demo</h2></center>
	`))
	 
     ui.Root.Add(ui.Html(`
		<div id="example-table"></div>
	`,true))
    
    ui.Inject(`
		var tabledata = [
			{id:1, name:"Oli Bob", age:"12", col:"red", dob:"12/08/2017"},
			{id:2, name:"Mary May", age:"1", col:"blue", dob:"14/05/1982"},
			{id:3, name:"Christine Lobowski", age:"42", col:"green", dob:"22/05/1982"},
			{id:4, name:"Brendon Philips", age:"125", col:"orange", dob:"01/08/1980"},
			{id:5, name:"Margret Marmajuke", age:"16", col:"yellow", dob:"31/01/1999"},
			{id:6, name:"Oli Bob", age:"12", col:"red", dob:"12/08/2017"},
			{id:7, name:"Mary May", age:"1", col:"blue", dob:"14/05/1982"},
			{id:8, name:"Christine Lobowski", age:"42", col:"green", dob:"22/05/1982"},
			{id:9, name:"Brendon Philips", age:"125", col:"orange", dob:"01/08/1980"},
			{id:10, name:"Margret Marmajuke", age:"16", col:"yellow", dob:"31/01/1999"},
		];
		
		var table = new Tabulator("#example-table", {
			height:200, 
			data:tabledata, 
			layout:"fitColumns", 
			columns:[ 
				{title:"Name", field:"name", sorter:"string", width:150},
				{title:"Age", field:"age", sorter:"number", hozAlign:"left", formatter:"progress"},
				{title:"Favourite Color", field:"col", sorter:"string", headerSort:false},
				{title:"Date Of Birth", field:"dob", sorter:"date", hozAlign:"center"},
			],
		});
		
		//trigger an alert message when the row is clicked
		table.on("rowClick", function(e, row){
			alert("Row " + row.getIndex() + " Clicked!!!!");
		});
	`);   



/*

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
		<html xmlns="http://www.w3.org/1999/xhtml">
		 <head>
		        <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
		        <title>Remote Java Script</title>
		        <link rel="stylesheet" href="/css/mini-dark.css">
				<meta name="viewport" content="width=device-width, initial-scale=1">
		    </head>
*/

---------------------------------------------------------------------------------------------

/*
I think if you want to add content directly to the body, the best way is:

document.body.innerHTML += "bla bla";

To replace it, use:

document.body.innerHTML = "bla bla";

----------------------------------------------------------------------------------------------------------------------------

document.body.innerHTML += "<input type=\"button\" class=\"primary\" value=\"Primary button\">"

document.body.innerHTML += "<input type=\"button\" class=\"primary\" value=\"Click button\" onclick=\"onButtonClick()\">"

document.body.innerHTML += '"bla bla"';

in div schreiben:

document.getElementById("content").innerHTML = "whatever";

----------------------------------------------------------------------------------------------------------------------------

Inject a java script function:

var onErrorClick = function () { console.log("Error"); };

Inject a Button using the function:

document.body.innerHTML += '<input type="button" class="secondary" value="Click Error" onclick="onErrorClick()">'

Inject a simple button:

document.body.innerHTML += '<input type="button" class="primary" value="Primary button">'

A button using buildin function onButtonClick:

document.body.innerHTML += '<input type="button" class="primary" value="Click button" onclick="onButtonClick()">'



*/

-----------------------------------------------------------

//ws: new ReconnectingWebSocket("ws://localhost:8080/cmd",null,{debug: false, reconnectInterval: 1000}),

function b64EncodeUnicode(str) {
    // first we use encodeURIComponent to get percent-encoded UTF-8,
    // then we convert the percent encodings into raw bytes which
    // can be fed into btoa.
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
        function toSolidBytes(match, p1) {
            return String.fromCharCode('0x' + p1);
    }));
}

//b64EncodeUnicode('â Ã  la mode'); // "4pyTIMOgIGxhIG1vZGU="
//b64EncodeUnicode('\n'); // "Cg=="       

function b64DecodeUnicode(str) {
    // Going backwards: from bytestream, to percent-encoding, to original string.
    return decodeURIComponent(atob(str).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
}
		
		            //b64DecodeUnicode('4pyTIMOgIGxhIG1vZGU='); // "â Ã  la mode"
		            //b64DecodeUnicode('Cg=='); // "\n"
*/


22: mqttpipe.Send <- mqttpipe.Message{"bws/status",`{"ID":"BWS-WA","Pump":"On"}`} 
37: mqttpipe.Send <- mqttpipe.Message{"bws/status",`{"ID":"BWS-WA","Pump":"Off"}`} 
